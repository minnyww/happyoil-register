[{"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\App.js":"1","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\config\\config.js":"2","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\index.js":"3","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\components\\LoadingIcon.js":"4","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\page\\RegisterResult.js":"5","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\page\\Register.js":"6","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\reportWebVitals.js":"7"},{"size":972,"mtime":1612082987346,"results":"8","hashOfConfig":"9"},{"size":469,"mtime":1611929105519,"results":"10","hashOfConfig":"9"},{"size":535,"mtime":1611939402810,"results":"11","hashOfConfig":"9"},{"size":327,"mtime":1611984611760,"results":"12","hashOfConfig":"9"},{"size":6692,"mtime":1612165673235,"results":"13","hashOfConfig":"9"},{"size":8941,"mtime":1612153237445,"results":"14","hashOfConfig":"9"},{"size":362,"mtime":1608964415559,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fijvz2",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\App.js",[],"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\config\\config.js",[],"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\index.js",[],"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\components\\LoadingIcon.js",[],"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\page\\RegisterResult.js",["31"],"import { memo, useEffect, useState } from \"react\";\nimport Table from \"antd/lib/table\";\nimport Typography from \"antd/lib/typography\";\nimport { firebaseApp } from \"../config/config\";\nimport LoadingIcon from \"../components/LoadingIcon\";\nimport styled from \"styled-components\";\nimport XLSX from \"xlsx\";\nimport Row from \"antd/lib/row\";\nimport Col from \"antd/lib/col\";\nimport Button from \"antd/lib/button\";\nimport { Input } from \"antd\";\nconst columns = [\n   {\n      title: \"ชื่อ-สกุล\",\n      dataIndex: \"fullName\",\n      key: \"fullName\",\n   },\n   {\n      title: \"อีเมล\",\n      dataIndex: \"email\",\n      key: \"email\",\n   },\n   {\n      title: \"เบอร์โทรศัพท์\",\n      dataIndex: \"phoneNumber\",\n      key: \"phoneNumber\",\n   },\n   {\n      title: \"รายละเอียดอื่นๆ\",\n      dataIndex: \"other\",\n      key: \"other\",\n   },\n   {\n      title: \"เวลาที่ลงทะเบียน\",\n      dataIndex: \"time\",\n      key: \"time\",\n      render: (time) => <span>{new Date(time).toLocaleString()}</span>,\n   },\n];\n\nconst BaseTable = styled(Table)`\n   .ant-spin.ant-spin-spinning {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n   }\n`;\n\nconst Register = () => {\n   const [, setPage] = useState(1);\n   const [registerData, setRegisterData] = useState([]);\n   const [isLoading, setIsLoading] = useState(false);\n   const [pageSize, setPageSize] = useState(null);\n   const LIMIT = 3;\n\n   useEffect(() => {\n      setIsLoading(true);\n      const unsub = firebaseApp\n         .firestore()\n         .collection(\"happyoil-registers\")\n         .onSnapshot((snapshot) => {\n            let sizeOfCollection = snapshot.size;\n            setPageSize(sizeOfCollection);\n\n            firebaseApp\n               .firestore()\n               .collection(\"happyoil-registers\")\n               .orderBy(\"index\", \"desc\")\n               .startAt(sizeOfCollection)\n               .limit(LIMIT)\n               .onSnapshot(async (snapshot) => {\n                  const registerData = await snapshot.docs.map((item) =>\n                     item.data(),\n                  );\n                  setRegisterData(registerData);\n               });\n            setIsLoading(false);\n         });\n      return () => {\n         unsub();\n      };\n   }, []);\n\n   console.log(\"registerData : \", registerData);\n\n   const createCsv = (data) => {\n      let test = XLSX.utils.json_to_sheet(data);\n      let wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, test, \"test\");\n      XLSX.writeFile(wb, \"export_register_data.xlsx\");\n   };\n\n   const exportToCsv = async () => {\n      firebaseApp\n         .firestore()\n         .collection(\"happyoil-registers\")\n         .onSnapshot(async (snapshot) => {\n            let sizeOfDocument = snapshot.size;\n            const LIMIT = 10000;\n\n            if (sizeOfDocument >= 38000) {\n               const LOOP_COUNT = Math.ceil(sizeOfDocument / LIMIT);\n\n               const LOOP_COUNT_ARRAY = Array.from(\n                  Array(LOOP_COUNT).keys(),\n               ).map((item) => item);\n\n               let lastIndex = 1;\n\n               for (const index of LOOP_COUNT_ARRAY) {\n                  console.log(\"lastIndex : \", lastIndex);\n                  const getRef = await firebaseApp\n                     .firestore()\n                     .collection(\"happyoil-registers\")\n                     .orderBy(\"index\")\n                     .startAt(lastIndex)\n                     .limit(LIMIT)\n                     .get();\n                  const getData = await getRef.docs.map((item) => item.data());\n                  lastIndex = getData[getData.length - 1].index + 1;\n                  createCsv(getData);\n               }\n            } else {\n               const getRef = await firebaseApp\n                  .firestore()\n                  .collection(\"happyoil-registers\")\n                  .orderBy(\"index\")\n                  .startAt(1)\n                  .limit(LIMIT)\n                  .get();\n               const getData = await getRef.docs.map((item) => item.data());\n               createCsv(getData);\n            }\n         });\n   };\n\n   const searchByName = async (search) => {\n      if (search) {\n         const getRef = await firebaseApp\n            .firestore()\n            .collection(\"happyoil-registers\")\n            .where(\"keyword\", \"array-contains\", search.toLowerCase())\n            .orderBy(\"index\", \"desc\")\n            .limit(LIMIT)\n            .get();\n         const getData = await getRef.docs.map((item) => item.data());\n         setRegisterData(getData);\n         setPage(1);\n      } else {\n         firebaseApp\n            .firestore()\n            .collection(\"happyoil-registers\")\n            .orderBy(\"index\", \"desc\")\n            .startAt(pageSize)\n            .limit(LIMIT)\n            .onSnapshot(async (snapshot) => {\n               const registerData = await snapshot.docs.map((item) =>\n                  item.data(),\n               );\n               setRegisterData(registerData);\n            });\n      }\n   };\n\n   return (\n      <div>\n         <Row>\n            <Col span={12}>\n               <Typography.Title level={3}>ข้อมูลการลงทะเบียน</Typography.Title>\n            </Col>\n            <Col span={12} style={{ textAlign: \"right\" }}>\n               <Button\n                  style={{ background: \"#005219\", color: \"white\" }}\n                  onClick={() => exportToCsv()}\n               >\n                  ดึงข้อมูล excel\n               </Button>\n            </Col>\n         </Row>\n         <Input\n            placeholder=\"search\"\n            onChange={(event) => searchByName(event.target.value)}\n         />\n         <BaseTable\n            pagination={{\n               total: pageSize,\n               pageSize: LIMIT,\n               onChange: async (page) => {\n                  const getRef = await firebaseApp\n                     .firestore()\n                     .collection(\"happyoil-registers\")\n                     .orderBy(\"index\", \"desc\")\n                     .startAt(pageSize - LIMIT * page + LIMIT)\n                     .limit(LIMIT)\n                     .get();\n                  const getData = await getRef.docs.map((item) => item.data());\n                  setRegisterData(getData);\n                  setPage(page);\n               },\n            }}\n            size=\"small\"\n            loading={{\n               spinning: isLoading,\n               indicator: <LoadingIcon />,\n            }}\n            dataSource={registerData}\n            columns={columns}\n            rowKey={(item) => item.index}\n         />\n      </div>\n   );\n};\n\nexport default memo(Register);\n","C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\page\\Register.js",[],"C:\\Users\\Min\\Desktop\\HappyOil\\happyoil\\src\\reportWebVitals.js",[],{"ruleId":"32","severity":1,"message":"33","line":110,"column":27,"nodeType":"34","messageId":"35","endLine":110,"endColumn":32},"no-unused-vars","'index' is assigned a value but never used.","Identifier","unusedVar"]